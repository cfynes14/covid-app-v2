{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\cpfyn\\\\Documents\\\\Coding\\\\Projects\\\\covid-app\\\\covid-19\\\\client\\\\src\\\\Components\\\\Map\\\\map.js\";\n// import { divIcon } from 'leaflet';\nimport React, { createRef } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport axios from 'axios';\nimport Card1 from '../Card/card';\n\nvar MyMap = /*#__PURE__*/function (_React$Component) {\n  _inherits(MyMap, _React$Component);\n\n  var _super = _createSuper(MyMap);\n\n  function MyMap(props) {\n    var _this;\n\n    _classCallCheck(this, MyMap);\n\n    _this = _super.call(this, props);\n\n    _this.searchLocation = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(location) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState({\n                  location: location\n                });\n\n                _context.next = 3;\n                return axios.get('http://localhost:5000/location', {\n                  params: {\n                    location: location\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if (!(response.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw Error(response.message);\n\n              case 8:\n                _this.setState({\n                  geoJson: response.data.geoJson,\n                  key: response.data.key\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.countryStyle = {\n      fillColor: 'red'\n    };\n    _this.state = {\n      location: '',\n      latitude: 52.5,\n      longitude: 0.12,\n      geoJson: null // key\n\n    };\n    _this.searchLocation = _this.searchLocation.bind(_assertThisInitialized(_this)); // this.clickLocation = this.clickLocation.bind(this);\n\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.mapRef = /*#__PURE__*/createRef();\n    return _this;\n  }\n\n  _createClass(MyMap, [{\n    key: \"handleClick\",\n    value: function handleClick() {//  const map = useMap()\n      //  map.fitBounds(this.state.latitude, this.state.longitude)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var ReturnGeoJson = function ReturnGeoJson() {\n        var map = _this2.mapRef; // const layer = customAreaRef.current.leafletElement\n\n        if (_this2.state.geoJson) {\n          var bounds = _this2.state.geoJson.getBounds();\n\n          map.fitBounds(bounds, {\n            animate: true\n          });\n        } //   const map = useMap();\n        // let bounds = this.state.geoJson.getBounds();\n        // map.fitBounds(bounds, {\n        //   animate: true,\n        // })\n\n\n        console.log('returning geojson');\n        return _this2.state.geoJson && /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: _this2.state.geoJson\n        }, _this2.state.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, _this2);\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          zoomControl: false,\n          center: [this.state.latitude, this.state.longitude],\n          zoom: 5.5,\n          children: [/*#__PURE__*/_jsxDEV(Card1, {\n            searchLocation: this.searchLocation,\n            location: this.state.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://api.maptiler.com/maps/uk-openzoomstack-road/256/{z}/{x}/{y}.png?key=X7qpq0iR5R376h5yMZXo\",\n            attribution: \"<a href=\\\"https://www.maptiler.com/copyright/\\\" target=\\\"_blank\\\">\\xA9 MapTiler</a> <a href=\\\"https://www.openstreetmap.org/copyright\\\" target=\\\"_blank\\\">\\xA9 OpenStreetMap contributors</a>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), ReturnGeoJson()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return MyMap;\n}(React.Component);\n\nexport default MyMap;","map":{"version":3,"sources":["C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/src/Components/Map/map.js"],"names":["React","createRef","MapContainer","TileLayer","GeoJSON","useMap","axios","Card1","MyMap","props","searchLocation","location","setState","get","params","response","status","Error","message","geoJson","data","key","countryStyle","fillColor","state","latitude","longitude","bind","handleClick","mapRef","ReturnGeoJson","map","bounds","getBounds","fitBounds","animate","console","log","Component"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,MAA3C,QAAyD,eAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,cAAlB;;IAGMC,K;;;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;;AADc,UAehBC,cAfgB;AAAA,0EAeC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,sBAAKC,QAAL,CAAc;AACZD,kBAAAA,QAAQ,EAAEA;AADE,iBAAd;;AADe;AAAA,uBAGQL,KAAK,CAACO,GAAN,CAAU,gCAAV,EAA4C;AAAEC,kBAAAA,MAAM,EAAE;AAACH,oBAAAA,QAAQ,EAARA;AAAD;AAAV,iBAA5C,CAHR;;AAAA;AAGTI,gBAAAA,QAHS;;AAAA,sBAIXA,QAAQ,CAACC,MAAT,KAAoB,GAJT;AAAA;AAAA;AAAA;;AAAA,sBAKLC,KAAK,CAACF,QAAQ,CAACG,OAAV,CALA;;AAAA;AAOX,sBAAKN,QAAL,CAAc;AAAEO,kBAAAA,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcD,OAAzB;AAAkCE,kBAAAA,GAAG,EAAEN,QAAQ,CAACK,IAAT,CAAcC;AAArD,iBAAd;;AAPW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAfD;;AAAA;AAAA;AAAA;AAAA;;AAAA,UA+BhBC,YA/BgB,GA+BD;AACXC,MAAAA,SAAS,EAAE;AADA,KA/BC;AAEd,UAAKC,KAAL,GAAa;AACTb,MAAAA,QAAQ,EAAE,EADD;AAETc,MAAAA,QAAQ,EAAE,IAFD;AAGTC,MAAAA,SAAS,EAAE,IAHF;AAITP,MAAAA,OAAO,EAAE,IAJA,CAKT;;AALS,KAAb;AAOA,UAAKT,cAAL,GAAsB,MAAKA,cAAL,CAAoBiB,IAApB,+BAAtB,CATc,CAUd;;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,+BAAnB;AACA,UAAKE,MAAL,gBAAc5B,SAAS,EAAvB;AAZc;AAaf;;;;kCAaa,CACZ;AACA;AACD;;;6BAOK;AAAA;;AAEJ,UAAM6B,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC5B,YAAIC,GAAG,GAAG,MAAI,CAACF,MAAf,CAD4B,CAE5B;;AACA,YAAG,MAAI,CAACL,KAAL,CAAWL,OAAd,EAAsB;AACpB,cAAIa,MAAM,GAAG,MAAI,CAACR,KAAL,CAAWL,OAAX,CAAmBc,SAAnB,EAAb;;AACAF,UAAAA,GAAG,CAACG,SAAJ,CAAcF,MAAd,EAAsB;AACpBG,YAAAA,OAAO,EAAE;AADW,WAAtB;AAGD,SAR2B,CAU7B;AACC;AACA;AACA;AACA;;;AACIC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACF,eAAO,MAAI,CAACb,KAAL,CAAWL,OAAX,iBACL,QAAC,OAAD;AAAS,UAAA,IAAI,EAAE,MAAI,CAACK,KAAL,CAAWL;AAA1B,WAAwC,MAAI,CAACK,KAAL,CAAWH,GAAnD;AAAA;AAAA;AAAA;AAAA,kBADF;AAIH,OApBC;;AAsBA,0BACA;AAAA,+BACF,QAAC,YAAD;AAAc,UAAA,WAAW,EAAE,KAA3B;AAAkC,UAAA,MAAM,EAAE,CAAC,KAAKG,KAAL,CAAWC,QAAZ,EAAsB,KAAKD,KAAL,CAAWE,SAAjC,CAA1C;AAAuF,UAAA,IAAI,EAAE,GAA7F;AAAA,kCACM,QAAC,KAAD;AAAO,YAAA,cAAc,EAAE,KAAKhB,cAA5B;AAA4C,YAAA,QAAQ,EAAE,KAAKc,KAAL,CAAWb;AAAjE;AAAA;AAAA;AAAA;AAAA,kBADN,eAEM,QAAC,SAAD;AACA,YAAA,GAAG,EAAC,kGADJ;AAEA,YAAA,WAAW,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,kBAFN,EASOmB,aAAa,EATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,cADA;AAkBH;;;;EA/Ee9B,KAAK,CAACsC,S;;AAkF1B,eAAe9B,KAAf","sourcesContent":["// import { divIcon } from 'leaflet';\r\nimport React, { createRef } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\r\nimport axios from 'axios';\r\n\r\nimport Card1 from '../Card/card';\r\n\r\n\r\nclass MyMap extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            location: '',\r\n            latitude: 52.5,\r\n            longitude: 0.12,\r\n            geoJson: null,\r\n            // key\r\n        }\r\n        this.searchLocation = this.searchLocation.bind(this);\r\n        // this.clickLocation = this.clickLocation.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.mapRef = createRef();\r\n      }\r\n      \r\n      searchLocation = async (location) => {\r\n        this.setState({\r\n          location: location})\r\n        const response = await axios.get('http://localhost:5000/location', { params: {location} })\r\n        if (response.status !== 200){\r\n            throw Error(response.message)\r\n        } else {\r\n            this.setState({ geoJson: response.data.geoJson, key: response.data.key })\r\n        }\r\n      }\r\n\r\n      handleClick() {\r\n        //  const map = useMap()\r\n        //  map.fitBounds(this.state.latitude, this.state.longitude)\r\n      }\r\n\r\n      countryStyle = {\r\n          fillColor: 'red'\r\n      };\r\n      \r\n       \r\n    render(){    \r\n\r\n        const ReturnGeoJson = () => {\r\n        let map = this.mapRef\r\n        // const layer = customAreaRef.current.leafletElement\r\n        if(this.state.geoJson){\r\n          let bounds = this.state.geoJson.getBounds();\r\n          map.fitBounds(bounds, {\r\n            animate: true\r\n          })\r\n        }\r\n        \r\n       //   const map = useMap();\r\n        // let bounds = this.state.geoJson.getBounds();\r\n        // map.fitBounds(bounds, {\r\n        //   animate: true,\r\n        // })\r\n            console.log('returning geojson')\r\n          return this.state.geoJson && (\r\n            <GeoJSON data={this.state.geoJson} key={this.state.key}\r\n            />\r\n          )\r\n      }\r\n\r\n        return(\r\n        <div>\r\n      <MapContainer zoomControl={false} center={[this.state.latitude, this.state.longitude]} zoom={5.5}>\r\n            <Card1 searchLocation={this.searchLocation} location={this.state.location}/>\r\n            <TileLayer\r\n            url=\"https://api.maptiler.com/maps/uk-openzoomstack-road/256/{z}/{x}/{y}.png?key=X7qpq0iR5R376h5yMZXo\" \r\n            attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\r\n            />\r\n            {/* <TileLayer fitBounds={[this.state.latitude, this.state.longitude]} /> */}\r\n\r\n\r\n            {ReturnGeoJson()}\r\n           \r\n        </MapContainer>\r\n        </div>\r\n        \r\n                    \r\n        )\r\n    }\r\n}\r\n\r\nexport default MyMap;"]},"metadata":{},"sourceType":"module"}