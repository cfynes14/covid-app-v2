{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cpfyn\\\\Documents\\\\Coding\\\\Projects\\\\covid-app\\\\covid-19\\\\client\\\\src\\\\Components\\\\Map\\\\map copy.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { createRef, useState, useRef } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport axios from 'axios';\nimport Card1 from '../Card/card';\n\nfunction Map() {\n  _s2();\n\n  var _this = this,\n      _s = $RefreshSig$();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      locationVal = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState([53.9600, 1.0873]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      coords = _useState4[0],\n      setCoords = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      geoJson = _useState6[0],\n      setGeoJson = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      key = _useState8[0],\n      setKey = _useState8[1];\n\n  var searchLocation = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(location) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLocation(locationVal = (_readOnlyError(\"locationVal\"), location));\n              _context.next = 3;\n              return axios.get('http://localhost:5000/location', {\n                params: {\n                  location: location\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(response.message);\n\n            case 8:\n              setGeoJson(geoJson = (_readOnlyError(\"geoJson\"), response.data.geoJson));\n              setKey(key = (_readOnlyError(\"key\"), response.data.key));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function searchLocation(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var countryStyle = {\n    fillColor: 'red'\n  };\n\n  var ReturnGeoJson = function ReturnGeoJson() {\n    _s();\n\n    var mapRef = useRef();\n\n    function handleOnSetView() {\n      var _mapRef$current = mapRef.current,\n          current = _mapRef$current === void 0 ? {} : _mapRef$current;\n      var map = current.leafletElement;\n      map.setView(coords, 14);\n    }\n\n    return geoJson && /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: geoJson\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, _this);\n  };\n\n  _s(ReturnGeoJson, \"eZwvXZNGrOinO8i65lLhOza0GRY=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      zoomControl: false,\n      center: true,\n      zoom: 5.5,\n      children: [/*#__PURE__*/_jsxDEV(Card1, {\n        searchLocation: searchLocation,\n        location: locationVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://api.maptiler.com/maps/uk-openzoomstack-road/256/{z}/{x}/{y}.png?key=X7qpq0iR5R376h5yMZXo\",\n        attribution: \"<a href=\\\"https://www.maptiler.com/copyright/\\\" target=\\\"_blank\\\">\\xA9 MapTiler</a> <a href=\\\"https://www.openstreetmap.org/copyright\\\" target=\\\"_blank\\\">\\xA9 OpenStreetMap contributors</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), ReturnGeoJson()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Map, \"72MeGTjQqbEqFq1nwGsgQi76Ql8=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/Users/cpfyn/Documents/Coding/Projects/covid-app/covid-19/client/src/Components/Map/map copy.js"],"names":["React","createRef","useState","useRef","MapContainer","TileLayer","GeoJSON","axios","Card1","Map","locationVal","setLocation","coords","setCoords","geoJson","setGeoJson","key","setKey","searchLocation","location","get","params","response","status","Error","message","data","countryStyle","fillColor","ReturnGeoJson","mapRef","handleOnSetView","current","map","leafletElement","setView"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,OAAlC,QAAiD,eAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,cAAlB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAAA;AAAA;;AAAA,kBAEsBP,QAAQ,CAAC,EAAD,CAF9B;AAAA;AAAA,MAENQ,WAFM;AAAA,MAEOC,WAFP;;AAAA,mBAGeT,QAAQ,CAAC,CAAC,OAAD,EAAU,MAAV,CAAD,CAHvB;AAAA;AAAA,MAGNU,MAHM;AAAA,MAGEC,SAHF;;AAAA,mBAIiBX,QAAQ,CAAC,IAAD,CAJzB;AAAA;AAAA,MAINY,OAJM;AAAA,MAIGC,UAJH;;AAAA,mBAKSb,QAAQ,CAAC,CAAD,CALjB;AAAA;AAAA,MAKNc,GALM;AAAA,MAKDC,MALC;;AAOV,MAAMC,cAAc;AAAA,wEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBR,cAAAA,WAAW,CAACD,WAAW,mCAAGS,QAAH,CAAZ,CAAX;AADoB;AAAA,qBAEGZ,KAAK,CAACa,GAAN,CAAU,gCAAV,EAA4C;AAAEC,gBAAAA,MAAM,EAAE;AAACF,kBAAAA,QAAQ,EAARA;AAAD;AAAV,eAA5C,CAFH;;AAAA;AAEdG,cAAAA,QAFc;;AAAA,oBAGhBA,QAAQ,CAACC,MAAT,KAAoB,GAHJ;AAAA;AAAA;AAAA;;AAAA,oBAIVC,KAAK,CAACF,QAAQ,CAACG,OAAV,CAJK;;AAAA;AAMhBV,cAAAA,UAAU,CAACD,OAAO,+BAAGQ,QAAQ,CAACI,IAAT,CAAcZ,OAAjB,CAAR,CAAV;AACAG,cAAAA,MAAM,CAACD,GAAG,2BAAGM,QAAQ,CAACI,IAAT,CAAcV,GAAjB,CAAJ,CAAN;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdE,cAAc;AAAA;AAAA;AAAA,KAApB;;AAWA,MAAOS,YAAY,GAAG;AACjBC,IAAAA,SAAS,EAAE;AADM,GAAtB;;AAKG,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAC,QAAMC,MAAM,GAAG3B,MAAM,EAArB;;AAC3B,aAAS4B,eAAT,GAA2B;AAAA,4BACAD,MADA,CACjBE,OADiB;AAAA,UACjBA,OADiB,gCACP,EADO;AAAA,UAEDC,GAFC,GAEOD,OAFP,CAEjBE,cAFiB;AAIzBD,MAAAA,GAAG,CAACE,OAAJ,CAAYvB,MAAZ,EAAoB,EAApB;AACD;;AAED,WAAOE,OAAO,iBACZ,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEA;AAAf,OAA6BE,GAA7B;AAAA;AAAA;AAAA;AAAA,aADF;AAIH,GAZC;;AAvBO,KAuBDa,aAvBC;;AAqCP,sBACA;AAAA,2BACF,QAAC,YAAD;AAAc,MAAA,WAAW,EAAE,KAA3B;AAAkC,MAAA,MAAM,MAAxC;AAAyC,MAAA,IAAI,EAAE,GAA/C;AAAA,8BACM,QAAC,KAAD;AAAO,QAAA,cAAc,EAAEX,cAAvB;AAAuC,QAAA,QAAQ,EAAER;AAAjD;AAAA;AAAA;AAAA;AAAA,cADN,eAEM,QAAC,SAAD;AACA,QAAA,GAAG,EAAC,kGADJ;AAEA,QAAA,WAAW,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,cAFN,EAQOmB,aAAa,EARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,UADA;AAiBP;;IAtDQpB,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["\r\nimport React, { createRef, useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport axios from 'axios';\r\n\r\nimport Card1 from '../Card/card';\r\n\r\n\r\nfunction Map() {\r\n\r\n  const [locationVal, setLocation] = useState('');\r\n  const [coords, setCoords] = useState([53.9600, 1.0873]);\r\n  const [geoJson, setGeoJson] = useState(null);\r\n  const [key, setKey] = useState(0)\r\n       \r\n     const searchLocation = async (location) => {\r\n        setLocation(locationVal = location)\r\n        const response = await axios.get('http://localhost:5000/location', { params: {location} })\r\n        if (response.status !== 200){\r\n            throw Error(response.message)\r\n        } else {\r\n            setGeoJson(geoJson = response.data.geoJson)\r\n            setKey(key = response.data.key)\r\n            } \r\n        } \r\n      \r\n     const  countryStyle = {\r\n          fillColor: 'red'\r\n      };\r\n         \r\n\r\n        const ReturnGeoJson = () => {const mapRef = useRef();\r\n          function handleOnSetView() {\r\n            const { current = {} } = mapRef;\r\n            const { leafletElement: map } = current;\r\n        \r\n            map.setView(coords, 14);\r\n          }\r\n  \r\n          return geoJson && (\r\n            <GeoJSON data={geoJson} key={key}\r\n            />\r\n          )\r\n      }\r\n\r\n        return(\r\n        <div>\r\n      <MapContainer zoomControl={false} center zoom={5.5}>\r\n            <Card1 searchLocation={searchLocation} location={locationVal}/>\r\n            <TileLayer\r\n            url=\"https://api.maptiler.com/maps/uk-openzoomstack-road/256/{z}/{x}/{y}.png?key=X7qpq0iR5R376h5yMZXo\" \r\n            attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\r\n            />\r\n\r\n\r\n            {ReturnGeoJson()}\r\n           \r\n        </MapContainer>\r\n        </div>\r\n        \r\n                    \r\n   )\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}